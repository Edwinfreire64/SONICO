<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comprar Sonico Token</title>
    <script src="https://cdn.jsdelivr.net/npm/web3/dist/web3.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        button { padding: 10px 20px; font-size: 16px; cursor: pointer; margin: 10px; }
    </style>
</head>
<body>
    <h1>Compra Sonico Token</h1>
    <button id="connectWallet">Conectar MetaMask</button>
    <button id="buyWithBNB" disabled>Comprar con BNB</button>
    <button id="buyWithUSDT" disabled>Comprar con USDT</button>
    <p id="status"></p>

    <script>
    const tokenAddress = "0xTuToken"; // Reemplaza con la dirección de tu token Sonico
    const pancakeRouter = "0x10ED43C718714eb63d5aA57B78B54704E256024E"; // Router PancakeSwap
    const usdtAddress = "0x55d398326f99059fF775485246999027B3197955"; // USDT en BSC
    let userAddress;
    let web3;

    // Conectar MetaMask
    async function connectWallet() {
        if (window.ethereum) {
            web3 = new Web3(window.ethereum);
            try {
                await window.ethereum.request({ method: "eth_requestAccounts" });
                const accounts = await web3.eth.getAccounts();
                userAddress = accounts[0];
                document.getElementById("status").innerText = `Conectado: ${userAddress}`;
                document.getElementById("buyWithBNB").disabled = false;
                document.getElementById("buyWithUSDT").disabled = false;
            } catch (error) {
                console.error("Error al conectar la wallet", error);
                document.getElementById("status").innerText = "Error al conectar la billetera.";
            }
        } else {
            alert("Por favor, instala MetaMask.");
        }
    }

    // Función para comprar token usando PancakeSwap
    async function buyToken(paymentToken) {
        if (!userAddress) return alert("Conecta tu wallet primero");

        const routerContract = new web3.eth.Contract([
            {
                "constant": false,
                "inputs": [
                    { "name": "amountIn", "type": "uint256" },
                    { "name": "amountOutMin", "type": "uint256" },
                    { "name": "path", "type": "address[]" },
                    { "name": "to", "type": "address" },
                    { "name": "deadline", "type": "uint256" }
                ],
                "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    { "name": "amountOutMin", "type": "uint256" },
                    { "name": "path", "type": "address[]" },
                    { "name": "to", "type": "address" },
                    { "name": "deadline", "type": "uint256" }
                ],
                "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
                "outputs": [],
                "payable": true,
                "stateMutability": "payable",
                "type": "function"
            }
        ], pancakeRouter);

        const amountToBuy = web3.utils.toWei("10", "ether"); // Cantidad ajustable
        let path;

        try {
            document.getElementById("status").innerText = "Procesando transacción...";
            document.getElementById("buyWithBNB").disabled = true;
            document.getElementById("buyWithUSDT").disabled = true;

            if (paymentToken === "BNB") {
                path = ["0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE", tokenAddress];
                await routerContract.methods.swapExactETHForTokensSupportingFeeOnTransferTokens(
                    0,
                    path,
                    userAddress,
                    Math.floor(Date.now() / 1000) + 60 * 10
                ).send({ from: userAddress, value: web3.utils.toWei("0.01", "ether") }); // Cambia "0.01" según la cantidad
            } else if (paymentToken === "USDT") {
                path = [usdtAddress, tokenAddress];
                await routerContract.methods.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                    amountToBuy,
                    0,
                    path,
                    userAddress,
                    Math.floor(Date.now() / 1000) + 60 * 10
                ).send({ from: userAddress });
            }

            document.getElementById("status").innerText = "Compra realizada con éxito";
        } catch (error) {
            console.error("Error en la transacción", error);
            document.getElementById("status").innerText = "Hubo un error en la transacción. Por favor, inténtalo de nuevo.";
        } finally {
            document.getElementById("buyWithBNB").disabled = false;
            document.getElementById("buyWithUSDT").disabled = false;
        }
    }

    // Eventos para los botones
    document.getElementById("connectWallet").addEventListener("click", connectWallet);
    document.getElementById("buyWithBNB").addEventListener("click", () => buyToken("BNB"));
    document.getElementById("buyWithUSDT").addEventListener("click", () => buyToken("USDT"));
    </script>

</body>
</html>
